# Barrierefreie Softwareentwicklung - Ein praktischer Leitfaden

## **Einleitung**

Dieser Leitfaden enthält eine umfassende Analyse der Barrierefreiheitsprobleme auf verschiedenen Webseiten und beschreibt detailliert die Lösungen zur Behebung dieser Fehler. Die identifizierten Probleme verstoßen gegen die Web Content Accessibility Guidelines (WCAG) und können dazu führen, dass Menschen mit Behinderungen erhebliche Schwierigkeiten haben, die Inhalte der Webseite zu nutzen. Durch die Korrektur dieser Fehler wird sichergestellt, dass alle Nutzer eine gleichwertige Erfahrung haben, unabhängig von ihrer körperlichen oder technischen Einschränkung.

Die hier dargestellten Lösungen sind lediglich Vorschläge zur barrierefreien Optimierung und dienen nur zur Veranschaulichung.

## Inhaltsverzeichnis

1. HTML-Grundlagen
    1. Navigation und Struktur
    2. Formulare und Eingabefelder
    3. Links & Buttons
    4. Checklisten für barrierefreie Entwicklung
    5. Fehlerübersicht und Korrekturen
       1. Fehlerübersicht und Korrekturen ARAG
       2. Fehlerübersicht und Korrekturen MEINE-ARAG
       3. Fehlerübersicht und Korrekturen TARIFRECHNER ALT
       4. Fehlerübersicht und Korrekturen TARIFRECHNER NEU
2. ARIA-Attribute
   1. ARIA Labels, Roles und States im Überblick
   2. Dynamische States im Detail
   3. Praktische Tipps für ARIA-States
   4. Checklisten für barrierefreie Entwicklung
   5. Fehlerübersicht und Korrekturen
      1. Fehlerübersicht und Korrekturen ARAG
      2. Fehlerübersicht und Korrekturen MEINE-ARAG
      3. Fehlerübersicht und Korrekturen TARIFRECHNER ALT
      4. Fehlerübersicht und Korrekturen TARIFRECHNER NEU
3. JavaScript und dynamische Inhalte
   1. Navigation
      1. Fokusmanagement
      2. Tastaturnavigation
      3. ARIA - Labelling mit JavaScript
   2. Progressive Enhancement
   3. Best Practices
   4. Checklisten für barrierefreie Entwicklung
4. Mobile Barrierefreiheit
    1. Wesentliche Unterschiede zur Desktop-Entwicklung
    2. Mobile-spezifische Accessibility Features
    3. Checklisten für barrierefreie Entwicklung
5. Testing
   1. Manuelles Testing
      1. Einleitung
      2. Manuelle Prüfbereiche
      3. Checkliste für effizientes manuelles Testing
      4. Schlussfolgerung
   2. Automatisiertes Testing
      1. Einleitung
      2. Grenzen und Limitationen
      3. Einbindung & Best Practices
6. Zusammenfassung und Weitere Ressourcen
   1. Wichtige Werkzeuge
   2. Nützliche Links und Referenzen


## 1. HTML-Grundlagen

Die Basis jeder barrierefreien Webseite ist gut strukturiertes, semantisches HTML. Dies bedeutet, HTML-Elemente entsprechend ihrer Bedeutung zu verwenden, nicht nur für ihr Aussehen.

### Warum semantisches HTML wichtig ist

1. **Screenreader-Unterstützung**: Semantische Elemente werden von Screenreadern richtig interpretiert und vorgelesen.
2. **Keyboard-Navigation**: Ermöglicht bessere Navigation mit der Tastatur.
3. **SEO**: Suchmaschinen verstehen die Struktur der Seite besser.
4. **Wartbarkeit**: Der Code ist besser zu verstehen und zu warten.

### Semantische Struktur im Detail

Hier sind die wichtigsten semantischen HTML-Elemente und ihre Verwendung:

```html
<!-- Gut: Semantische Struktur -->
<header>
  <h1>Webseitentitel</h1>
  <nav>
    <ul>
      <li><a href="#home">Home</a></li>
      <li><a href="#about">úber uns</a></li>
    </ul>
  </nav>
</header>

<main>
  <article>
    <h2>Hauptinhalt</h2>
    <p>Inhalt des Artikels...</p>
  </article>
</main>

<footer>
  <p>&copy; 2025 Unternehmen</p>
</footer>

<!-- Schlecht: Keine semantische Struktur -->
<div class="header">
  <div class="title">Webseitentitel</div>
  <div class="nav">
    <div class="nav-item">Home</div>
    <div class="nav-item">über uns</div>
  </div>
</div>
```

## 1.1 Navigation und Struktur

Zugänglichkeit für alle Nutzer:
- Viele Menschen mit motorischen Einschränkungen oder Sehbehinderungen verwenden keine Maus, sondern navigieren ausschließlich mit der Tastatur.

Wichtig:
- Interaktive Elemente (z. B. Buttons, Links, Formularfelder) müssen per Tastatur erreichbar und bedienbar sein.
- Visuelle Hinweise (Fokusstate) geben Feedback, wo User sich befinden

### Keyboard Navigation

```javascript
// Keyboard Navigation für ein Dropdown-Menü
const dropdown = document.querySelector('.dropdown');
const trigger = dropdown.querySelector('.dropdown-trigger');
const menu = dropdown.querySelector('.dropdown-menu');
const items = menu.querySelectorAll('a');

trigger.addEventListener('keydown', (e) => {
  if (e.key === 'Enter' || e.key === ' ') {
    e.preventDefault();
    menu.hidden = !menu.hidden;
    if (!menu.hidden) {
      items[0].focus();
    }
  }
});

items.forEach((item, index) => {
  item.addEventListener('keydown', (e) => {
    let targetItem;

    switch(e.key) {
      case 'ArrowDown':
        e.preventDefault();
        targetItem = items[index + 1] || items[0];
        break;
      case 'ArrowUp':
        e.preventDefault();
        targetItem = items[index - 1] || items[items.length - 1];
        break;
      case 'Escape':
        e.preventDefault();
        menu.hidden = true;
        trigger.focus();
        break;
    }

    if (targetItem) {
      targetItem.focus();
    }
  });
});
```

## 1.2 Formulare und Eingabefelder

Jedes Eingabefeld sollte ein zugeordnetes ```<label>```-Tag haben.

Für interaktive Elemente oder spezielle Anwendungsfälle kannst du aria-label oder aria-labelledby verwenden, um Screenreadern zusätzliche Informationen bereitzustellen.

### Grundlegende Formularstruktur

```html
<form role="form" aria-label="Kontaktformular">
  <fieldset>
    <legend>Persönliche Informationen</legend>

    <div class="form-group">
      <label for="name">
        Name
        <span class="required" aria-hidden="true">*</span>
        <span class="sr-only">erforderlich</span>
      </label>
      <input
        type="text"
        id="name"
        name="name"
        required
        aria-required="true"
        aria-describedby="name-help"
      >
      <span id="name-help" class="help-text">
        Bitte geben Sie Ihren vollständigen Namen ein
      </span>
    </div>

    <div class="form-group">
      <label for="email">E-Mail</label>
      <input
        type="email"
        id="email"
        name="email"
        aria-describedby="email-error"
      >
      <span id="email-error" class="error" role="alert" hidden>
        Bitte geben Sie eine gültige E-Mail-Adresse ein
      </span>
    </div>
  </fieldset>
</form>

<style>
.sr-only {
  position: absolute;
  width: 1px;
  height: 1px;
  padding: 0;
  margin: -1px;
  overflow: hidden;
  clip: rect(0, 0, 0, 0);
  border: 0;
}

.form-group {
  margin-bottom: 1rem;
}

.error {
  color: #dc3545;
}

.help-text {
  font-size: 0.875rem;
  color: #6c757d;
}
</style>
```

---

## 1.3 Links & Buttons <a name="links"></a>

- Beschreibende Linktexte verwenden
- Links sollten visuell deutlich als solche erkennbar sein, z. B. durch Unterstreichung oder Farbe.
- Wenn der Linktext allein nicht ausreicht (z. B. bei einem Symbol-Link), ergänze ihn mit einem beschreibenden aria-label.

### Links als Card aufbauen

```html
<style>
  .card {
    position: relative;
    cursor: pointer;
    outline: none;
  }

  .card:focus-within {
    outline: 2px solid #3b82f6; /* Blaue Umrandung für Fokus */
    outline-offset: 4px;
  }

  /* :before sorgt für den klickbaren Bereich */
  .card::before {
    content: "";
    position: absolute;
    inset: 0;
    z-index: 1;
  }

  .card a {
    position: relative;
    z-index: 2;
  }
</style>

<div class="card group block max-w-sm bg-white shadow-lg rounded-2xl overflow-hidden transition-transform transform hover:scale-105 focus-within:ring-2 focus-within:ring-blue-500"
     role="link"
     tabindex="0"
     aria-label="Mehr über das Produkt erfahren"
     onclick="window.location='https://example.com';"
     onkeydown="if(event.key === 'Enter') window.location='https://example.com';">

  <!-- Bild zuerst -->
  <img src="https://via.placeholder.com/400" alt="Produktbild" class="w-full h-48 object-cover" />

  <div class="p-4 relative">
    <!-- Überschrift als klickbarer Link -->
    <h3 class="text-lg font-semibold text-gray-900">
      <a href="https://example.com" class="text-blue-600 underline focus:outline-none focus:ring-2 focus:ring-blue-500">
        Produktname
      </a>
    </h3>

    <!-- Beschreibung nach der Überschrift -->
    <p class="text-gray-600 mt-2">Kurze Beschreibung des Produkts. Lorem ipsum dolor sit amet.</p>

    <!-- Optionaler "Mehr erfahren"-Link -->
    <a href="https://example.com" class="mt-3 inline-block text-blue-600 font-medium underline focus:outline-none focus:ring-2 focus:ring-blue-500">
      Mehr erfahren &rarr;
    </a>
  </div>

</div>


```

### Skip-Links

Biete Nutzern die Möglichkeit, große Inhalte wie Navigationsmenüs zu überspringen, um direkt zum Hauptinhalt zu gelangen.

```html
<!-- Skip-Links am Anfang der Seite -->
<div class="skip-links">
  <a href="#main-content" class="skip-link">
    Zum Hauptinhalt springen
  </a>
  <a href="#nav" class="skip-link">
    Zur Navigation springen
  </a>
</div>

<style>
.skip-link {
  position: absolute;
  top: -40px;
  left: 0;
  padding: 8px;
  background: #fff;
  z-index: 100;
}

.skip-link:focus {
  top: 0;
}
</style>
```

## Buttons vs. Links

- Ein Link ist fokussierbar und kann durch die Eingabetaste ausgelöst werden. Ein Link leitet auf eine neue Seite oder einen Abschnitt innerhalb derselben Seite weiter. Im Rotor von VoiceOver wird er auch im Fenster „Links“ gesammelt.
- Ein Link sollte wie ein Link aussehen und nicht wie ein anderes Element, in diesem Fall wie eine Schaltfläche. Links und Schaltflächen mögen sich für durchschnittliche Benutzer gleich „anfühlen“. Sie werden mit der Maus über den Link oder die Schaltfläche fahren und mit der Maus darauf klicken.

- Wenn wir aber die Tastatur verwenden und einen Link als Schaltfläche „tarnen“, kann es sein, dass es nicht wie geplant funktioniert.

---



## 1.4 Checklisten für barrierefreie Entwicklung

#### Seitenstruktur und Navigation

- [ ] Inhalte sind mit Tastatur bedienbar (Tab, Shift+Tab, Enter, Leertaste, Pfeiltasten)
- [ ] Semantisch korrektes HTML wird verwendet
- [ ] Drag-Operationen haben Klick-Alternativen
- [ ] Abstände werden nicht mittels Grafiken oder leerer Absätze erzeugt
- [ ] Abschnitte wie Kopfbereich, Seitenleiste oder Inhalt sind überspringbar
- [ ] Wichtige Inhalte sind nicht ausschließlich via CSS oder JS implementiert
- [ ] Überschriften-Hierarchie ist visuell logisch
- [ ] Seitentitel und Überschriften sind beschreibend
- [ ] Sprachauszeichnung ist maschinell erkennbar
- [ ] Focus-Status ist sichtbar mit ausreichendem Kontrast
- [ ] Iframes haben beschreibende Titel

#### Formulare und Tabellen

- [ ] Verwende das table-Element, um tabellarische Daten zu beschreiben
- [ ] Verwende das th-Element für Tabellenüberschriften (mit entsprechenden Scope-Attributen)
- [ ] Verwende das caption-Element, um einen Titel für die Tabelle anzugeben
- [ ] Versuche Bilder in einer Tabelle zu vermeiden
- [ ] Formularfelder sind semantisch ausgezeichnet
- [ ] Alle Eingaben in einem Formular sind mit einem entsprechenden Label verbunden
- [ ] Verwende die Elemente  ```fieldset```  und  ```legend```  wenn benötigt
- [ ] Fehlermeldungen sind klar als Text formuliert
- [ ] Pflichtfelder und Eingabeformate sind gekennzeichnet
- [ ] Keine redundanten Eingaben erforderlich
- [ ] Rechtlich relevante Eingaben sind überprüfbar/bestätigbar
- [ ] Tabellen haben caption und summary
- [ ] Formular/Tool-Felder sind klar benannt mit Alternativtexten
- [ ] Formulare sind möglichst kurz und fordern nur notwendige Infos
- [ ] Keine Zeitschranken bei der Eingabe
- [ ] Eingaben in Formularelemente können gegebenenfalls automatisch vervollständigt werden
- [ ] Stelle sicher, dass Fehler nach dem Absenden korrekt auch für Screenreader angezeigt werden

#### Links & Buttons

- [ ] Linktexte sind eindeutig (aus Text oder Umfeld)
- [ ] Stelle sicher, das Links auch als solche erkennbar sind
- [ ] Achte darauf, dass alle Fokusstates korrekt und sichtbar sind
- [ ] Nutze das  ```a```-Element für Links
- [ ] Link-Titel bieten zusätzliche Informationen
- [ ] Stelle sicher, dass alle relevanten Steuerelemente den Status ```:focus``` haben
- [ ] Links in neuem Fenster nur, wenn nötig und dann gekennzeichnet
- [ ] Markiere Links, die sich in einer neuen Registerkarte öffnen
- [ ] Achte auf ausreichend Abstand zwischen den interaktiven Elementen
- [ ] Verwende das  ```button```-Element für Schaltflächen.

---

## **1.5. Fehlerübersicht und Korrekturen**

Dieser Bereich des Leitfadens wendet die allgemeinen Infos konkret auf die Findings der Website an.
Zur besseren Übersicht wurden die Incidents aus dem technischen Audit in die Oberthemen HTML und ARIA eingruppiert. Ausgegeben werden hier die nebst der Fehler-ID auch die Auswirkung, die Häufigkeit, Beispiel-Urls und eine umfangreiche Problembeschreibung mitsamt deren Lösung sowie einem Beispiel samt Lösung.

Die hier gegebenen Beispiele dienen der Veranschaulichung und stellen potenzielle Lösungsmöglichkeiten dar.

## 1.5.1 **ARAG.DE**

### **Fehler-ID:** nested-interactive

**Auswirkung:** serious

**Anzahl der Vorkommen:** 530

**Beispiel-URLs:**

- https://arag.de/
- https://arag.de/#maincontent
- https://arag.de/#suche
- https://arag.de/kontakt/
- https://arag.de/service/kundenservice/schadensmeldung/

**Problem:** Interaktive Elemente, wie `<a>`-Links, dürfen nicht innerhalb anderer interaktiver Elemente wie `<div role="button">` verschachtelt werden. Dies verursacht Probleme für Tastaturnutzer und führt dazu, dass assistive Technologien nicht eindeutig erkennen können, welches Element fokussierbar ist. Dies kann die Navigation erschweren und unerwartetes Verhalten verursachen.

**Lösung:** Die Schaltfläche sollte entweder als `<button>` oder als `<a>`-Element gestaltet werden, aber nicht beide kombiniert.

#### **Beispiel 1 (Original):**

```html
<div class="button" role="button">
    <a href="/rechtsschutzversicherung/mietrechtsschutz/schneeraeumen/" title="Schneeschippen: Wer, wann und wie oft">
        Mehr erfahren
    </a>
</div>
```

#### **Korrigierte Version:**

```html
<a class="button" href="/rechtsschutzversicherung/mietrechtsschutz/schneeraeumen/" title="Schneeschippen: Wer, wann und wie oft">
    Mehr erfahren
</a>
```

---

### **Fehler-ID:** color-contrast

**Auswirkung:** serious

**Anzahl der Vorkommen:** 366

**Beispiel-URLs:**

- https://arag.de/kontakt/
- https://arag.de/sitemap/
- https://arag.de/service/kundenservice/schadensmeldung/
- https://arag.de/unternehmen/
- https://arag.de/versicherungs-ratgeber/

**Problem:** Ein unzureichender Farbkontrast zwischen Text und Hintergrund erschwert es Menschen mit Sehbehinderungen oder Farbsehschwächen, Inhalte zu erkennen. Laut WCAG 2.1 sollte der Kontrast mindestens 4.5:1 für normalen Text und 3:1 für großen Text betragen.

**Lösung:** Die Textfarbe sollte so angepasst werden, dass ein ausreichend hoher Kontrast zum Hintergrund entsteht.

#### **Beispiel 1 (Original):**

```html
<span style="color: #ccc;">Startseite</span>
```

#### **Korrigierte Version:**

```html
<span style="color: #333;">Startseite</span>
```

---

### **Fehler-ID:** select-name

**Auswirkung:** critical

**Anzahl der Vorkommen:** 21

**Beispiel-URLs:**

- https://arag.de/rechtsschutzversicherung/verkehrsrechtsschutz/
- https://arag.de/krankenzusatzversicherung/krankentagegeldversicherung/
- https://arag.de/vereinsversicherung/
- https://arag.de/vereinsversicherung/sportversicherung/
- https://arag.de/vereinsversicherung/sportversicherung/d-o-versicherung/

**Problem:** `<select>`-Elemente ohne eine sichtbare Bezeichnung können für Screenreader-Nutzer unklar sein, da nicht ersichtlich ist, was die Auswahl bedeutet.

**Lösung:** Ein `<label>`-Element mit einer `for`-Verknüpfung sollte hinzugefügt werden.

#### **Beispiel 1 (Original):**

```html
<select name="ichBin" class="styled">
```

#### **Korrigierte Version:**

```html
<label for="ichBin">Ich bin:</label>
<select id="ichBin" name="ichBin" class="styled">
```

---

### **Fehler-ID:** link-name

**Auswirkung:** serious

**Anzahl der Vorkommen:** 6

**Beispiel-URLs:**

- https://arag.de/hausratversicherung/
- https://arag.de/hausratversicherung/fahrradversicherung/
- https://arag.de/hausratversicherung/elementarversicherung/
- https://arag.de/tierversicherung/hundehaftpflicht/
- https://arag.de/tierversicherung/pferdehaftpflicht/

**Problem:** Links ohne klaren, beschreibenden Text sind für Nutzer mit Screenreadern unverständlich, da sie nicht wissen, wohin der Link führt.

**Lösung:** Ein `aria-label` oder eine aussagekräftige Link-Beschriftung sollte hinzugefügt werden.

#### **Beispiel 1 (Original):**

```html
<a href="javascript:void(0)">&nbsp;</a>
```

#### **Korrigierte Version:**

```html
<a href="javascript:void(0)" aria-label="Kalender öffnen">📅</a>
-> Ggf. zusätzlich eine Linkbeschriftung wählen
```

---

### **Fehler-ID:** frame-title

**Auswirkung:** serious

**Anzahl der Vorkommen:** 5

**Beispiel-URLs:**

- https://arag.de/hausratversicherung/
- https://arag.de/hausratversicherung/fahrradversicherung/
- https://arag.de/tierversicherung/hundehaftpflicht/
- https://arag.de/tierversicherung/pferdehaftpflicht/
- https://arag.de/hausratversicherung/elektronikversicherung/

**Problem:** Jedes Formularelement muss ein Label haben.

**Lösung:** Ein ```aria-label``` oder eine aussagekräftige Link-Beschriftung sollte hinzugefügt werden.

#### **Beispiel 1 (Original):**

```html
<iframe id="iframe-1331958" src="..."></iframe>
```

#### **Korrigierte Version:**

```html
<iframe id="iframe-1331958" src="..." title="Hausratversicherungsformular"></iframe>
```

---

### **Fehler-ID:** label

**Auswirkung:** critical

**Anzahl der Vorkommen:** 4

**Beispiel-URLs:**

- https://arag.de/krankenzusatzversicherung/krankentagegeldversicherung/
- https://arag.de/kontakt/arag-vor-ort/
- https://arag.de/service/kundenservice/wallet/
- https://arag.de/jap/jforms/formulare/standard/00/00/32.faces?initFormular=true

**Problem:** Jedes Formularelement muss ein Label haben.

**Lösung:** Ein `aria-label` oder eine aussagekräftige Link-Beschriftung sollte hinzugefügt werden.

#### **Beispiel 1 (Original):**

```html
<input type="text" id="netto" name="netto" class="eingabe">
```

#### **Korrigierte Version:**

```html
<label for="netto">Nettoeinkommen:</label>
<input type="text" id="netto" name="netto" class="eingabe">
```

---


### **Fehler-ID:** image-alt

**Auswirkung:** critical

**Anzahl der Vorkommen:** 3

**Beispiel-URLs:**

- https://arag.de/rechtsschutzversicherung/mietrechtsschutz/schneeraeumen/
- https://arag.de/rechtsschutzversicherung/mietrechtsschutz/nebenkosten-pruefen-und-steuern-sparen/
- https://arag.de/rechtsschutzversicherung/arbeitsrechtsschutz/weihnachtsgeld/

**Problem:** Bilder ohne `alt`-Text können für Screenreader-Nutzer nicht interpretiert werden. Ohne Alternativtext bleiben wichtige Informationen unerreichbar.

**Lösung:** Ein aussagekräftiger `alt`-Text sollte hinzugefügt werden.

#### **Beispiel 1 (Original):**

```html
<img class="imgAuthor radius100" src="/medien/grafik/experten/portrait_christina_gellert.jpg">
```

#### **Korrigierte Version:**

```html
<img class="imgAuthor radius100" src="/medien/grafik/experten/portrait_christina_gellert.jpg" alt="Portrait von Christina Gellert">
```

---

## **1.5.2 MEINE-ARAG.DE - Fehlerübersicht und Korrekturen**

Dieser Bereich des Leitfadens wendet die allgemeinen Infos konkret auf die Findings der Website an.
Zur besseren Übersicht wurden die Incidents aus dem technischen Audit in die Oberthemen HTML und ARIA eingruppiert. Ausgegeben werden hier die nebst der Fehler-ID auch die Auswirkung, die Häufigkeit, Beispiel-Urls und eine umfangreiche Problembeschreibung mitsamt deren Lösung sowie einem Beispiel samt Lösung.

Die hier gegebenen Beispiele dienen der Veranschaulichung und stellen potenzielle Lösungsmöglichkeiten dar.


### **Fehler-ID:** heading-order

**Auswirkung:** serious

**Anzahl der Vorkommen:** 7

**Problem:** Die Reihenfolge der Überschriften (```h1 bis h6```) ist nicht konsistent und überspringt teilweise Ebenen.
             Ein Beispiel: Ein h4-Element erscheint vor einem h3, oder es gibt eine h2, dann aber direkt eine h5, ohne eine h3 oder h4 dazwischen.
             Dies kann die Struktur für Screenreader-Nutzer unklar machen und erschwert die Navigation auf der Seite.

**Lösung:** Alle Überschriften auf der Seite überprüfen und sicherstellen, dass sie logisch und hierarchisch angeordnet sind. Falls eine visuelle Unterscheidung notwendig ist, CSS anpassen, statt falsche Überschriftenebenen zu nutzen.
            Falls Sprünge in der Hierarchie notwendig sind, diese durch ```aria-labelledby``` oder alternative Navigationsmöglichkeiten ausgleichen.



#### **Beispiel 1 (Original):**

```html
<h2 class="subueberschrift" id="0_30_1_1" style="">
  <strong>Services, die Sie kennen sollten:</strong>
</h2>
<h4 class="subueberschrift Georgia" id="0_43_1_1" style="">
  <strong>Kennen Sie schon unsere neue Online-<br>Kunden-Community?</strong>
</h4>
```

#### **Korrigierte Version:**

```html
<h2 class="subueberschrift" id="0_30_1_1" style="">
  <strong>Services, die Sie kennen sollten:</strong>
</h2>
<h3 class="subueberschrift Georgia" id="0_43_1_1" style="">
  <strong>Kennen Sie schon unsere neue Online-<br>Kunden-Community?</strong>
</h3>
```

---

### **Fehler-ID:** skip-link

**Auswirkung:** serious

**Anzahl der Vorkommen:** 5

**Problem:** Das Ziel ```#suche``` existiert nicht oder ist nicht fokussierbar. Dadurch funktioniert der Skip-Link nicht.

**Lösung:** ```tabindex="-1"``` hinzufügen, damit der div-Bereich fokussierbar ist oder eine Überschrift hinzufügen, um die Struktur klarer zu machen.



#### **Beispiel 1 (Original):**

```html
<a id="skip-to-search" class="skip-mark" href="#suche" getonce="true">Zur Suche</a>

```

#### **Korrigierte Version:**

```html
<a id="skip-to-search" class="skip-mark" href="#suche">Zur Suche springen</a>

<div id="suche" tabindex="-1">
    <h2>Suchfunktion</h2>
    <input type="text" placeholder="Suchbegriff eingeben">
</div>

```

---

### **Fehler-ID:** landmark-unique

**Auswirkung:** serious

**Anzahl der Vorkommen:** 1

**Problem:** Mehrere ```role="region"```-Elemente ohne eindeutige Bezeichnung. Screenreader können die Bereiche nicht unterscheiden.

**Lösung:** ```aria-labelledby``` hinzufügen, um die Landmarke eindeutig zu kennzeichnen. Außerdem sollte ```role="region"``` wurde in ein section-Element eingebettet werden.



#### **Beispiel 1 (Original):**

```html
<div name="" class="klappliste H4 noBorderBottom plus"
style="" id="0_7_1_18" aria-controls="0_7_1_18" role="region" ga-id="Klappliste_3" getonce="true">

```

#### **Korrigierte Version:**

```html
<section id="0_7_1_18" role="region" aria-labelledby="faq-title">
    <h4 id="faq-title">Häufige Fragen</h4>
    <div class="klappliste H4 noBorderBottom plus">
        <!-- Inhalt der Klappliste -->
    </div>
</section>


```
---

## 1.5.3 **TARIFRECHNER ALT**

### **Fehler-ID:** html-has-lang

**Auswirkung:** serious

**Anzahl der Vorkommen:** 4

**Problem:** Die HTML-Seiten haben kein lang-Attribut, sodass Screenreader die Sprache nicht korrekt erkennen.

**Lösung:** Achte darauf, dass alle HTML-Seiten ein korrekt gesetztes ```lang```-Attribut haben.



#### **Beispiel 1 (Original):**

```html
<html>
```

#### **Korrigierte Version:**

```html
<html lang="de">
```

---

### **Fehler-ID:** link-name

**Auswirkung:** serious

**Anzahl der Vorkommen:** 8

**Problem:** Einige Links enthalten keinen sichtbaren Text, wodurch sie für Screenreader nicht verständlich sind.

**Lösung:** Versieh Links mit einem sichtbaren Text, der klare Information über das Ziel und die Aussage des Links hat.
            Wenn das nicht möglich ist, nutze ein ARIA-Label, um entsprechenden Kontext zu schaffen.


#### **Beispiel 1 (Original):**

```html
<a href="#" class="button"></a>
```

#### **Korrigierte Version:**

```html
<a href="#" class="button" aria-label="Mehr über den Tarif erfahren">Mehr über den Tarif erfahren</a>
```

---

### **Fehler-ID:** meta-viewport

**Auswirkung:** critical

**Anzahl der Vorkommen:** 4

**Problem:** Die viewport-Einstellungen verhindern das Zoomen, was für Nutzer mit Sehbeeinträchtigungen problematisch ist.

**Lösung:** Ermögliche den Zoom, sodass der Inhalt auch mobil für Nutzer mit Sehbeeinträchtigungen nutzbar ist.


#### **Beispiel 1 (Original):**

```html
<meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">
```

#### **Korrigierte Version:**

```html
<meta name="viewport" content="width=device-width, initial-scale=1">
```

---

### **Fehler-ID:** page-has-heading-one

**Auswirkung:** serious

**Anzahl der Vorkommen:** 4

**Problem:** Jede Seite sollte eine h1-Überschrift haben, um die Struktur klar zu machen.

**Lösung:** Versieh jede Seite mit h1-Überschirften, sodass die Struktur der Seite klar und einheitlich bleibt.


#### **Beispiel 1 (Original):**

```html
<h2>Willkommen</h2>
```

#### **Korrigierte Version:**

```html
<h1>Willkommen</h1>
```

---

### **Fehler-ID:** landmark-one-main

**Auswirkung:** serious

**Anzahl der Vorkommen:** 4

**Problem:** Keine ```role="main"```-Landmarke vorhanden, was für Screenreader die Navigation erschwert.

**Lösung:** Nutze ```landmark-regions```, um die Navigation für Screenreader zu erleichtern. Zuviel verschachtelter Content in ```<div>```-Containern
erschwert die Navigation.


#### **Beispiel 1 (Original):**

```html
<div class="content">
    <p>Hauptinhalt</p>
</div>
```

#### **Korrigierte Version:**

```html
<main role="main">
    <p>Hauptinhalt</p>
</main>
```

---

## 1.5.4 **TARIFRECHNER NEU**

### **Fehler-ID:** html-has-lang

**Auswirkung:** serious

**Anzahl der Vorkommen:** 6

**Problem:** Das ```<html>```-Element enthält kein lang-Attribut, sodass Screenreader die Sprache nicht korrekt erkennen können.

**Lösung:** Verwende korrekte ```lang```-Attribute, sodass Screenreader die Sprache korrekt erkennen können.


#### **Beispiel 1 (Original):**

```html
<html class="" data-lt-installed="true">
```

#### **Korrigierte Version:**

```html
<html lang="de">
```

---

### **Fehler-ID:** meta-viewport

**Auswirkung:** serious

**Anzahl der Vorkommen:** 6

**Problem:** Die ```viewport``-Einstellungen verhindern das Zoomen, was für Nutzer mit Sehbeeinträchtigungen problematisch ist.

**Lösung:** Nimm entsprechende Einstellungen vor, sodass das Zoomen zu erlaubt wird.


#### **Beispiel 1 (Original):**

```html
<meta content="width=device-width, initial-scale=1.0, minimum-scale=1.0, user-scalable=0, height=device-height" name="viewport">
```

#### **Korrigierte Version:**

```html
<meta name="viewport" content="width=device-width, initial-scale=1">
```

---

### **Fehler-ID:** link-name

**Auswirkung:** serious

**Anzahl der Vorkommen:** 9

**Problem:** Einige Links haben keinen sichtbaren oder zugänglichen Text. Screenreader können diese Links nicht interpretieren, was die Navigation erschwert.

**Lösung:** Achte auf aussagekräftige und deutliche Linktexte.


#### **Beispiel 1 (Original):**

```html
<a class="calendarClass" href="javascript:void(0)">&nbsp;</a>
```

#### **Korrigierte Version:**

```html
<a class="calendarClass" href="javascript:void(0)" aria-label="Kalender öffnen">📅</a>
-> Alternativ ein title-Attribut oder einen sichtbaren Text hinzufügen.
```

---

### **Fehler-ID:** label

**Auswirkung:** serious

**Anzahl der Vorkommen:** 1

**Problem:** Ein ```<input>```-Element hat keine zugehörige Beschriftung (```label``` oder ```aria-label```).

**Lösung:** Nutze ```label```-Attribute, um dem ```input-element```Kontext zu geben.


#### **Beispiel 1 (Original):**

```html
<input type="text" id="#2" name="LEISrtkv/1015[id=RSTOBJ][@RassenStichwort]" class="solfinSearchClass" autocomplete="off">
```

#### **Korrigierte Version:**

```html
<label for="#2">Rasse des Tieres:</label>
<input type="text" id="#2" name="LEISrtkv/1015[id=RSTOBJ][@RassenStichwort]" class="solfinSearchClass" autocomplete="off">
```

---

### **Fehler-ID:** page-has-heading-one

**Auswirkung:** serious

**Anzahl der Vorkommen:** 6

**Problem:** Jede Seite sollte eine h1-Überschrift haben, um die Struktur klar zu machen.

**Lösung:** Versieh jede Seite mit h1-Überschirften, sodass die Struktur der Seite klar und einheitlich bleibt.


#### **Beispiel 1 (Original):**

```html
<h2>Willkommen</h2>
```

#### **Korrigierte Version:**

```html
<h1>Willkommen</h1>
```

---
---


## 2. ARIA-Attribute

ARIA (Accessible Rich Internet Applications) ist eine Spezifikation, die HTML um zusätzliche Semantik erweitert, um Barrierefreiheit für dynamische Webanwendungen zu verbessern. ARIA ergänzt HTML, wo die native Semantik nicht ausreicht.

### Wichtig: Die 5 Regeln der ARIA-Nutzung

1. Bevorzugen Sie native HTML-Elemente mit eingebauter ARIA-Semantik
2. Ändern Sie keine native Semantik, außer es ist absolut notwendig
3. Alle interaktiven ARIA-Kontrollen müssen per Tastatur bedienbar sein
4. Verwenden Sie keine role="presentation" oder aria-hidden="true" auf fokussierbaren Elementen
5. Alle interaktiven Elemente müssen zugängliche Namen haben

### 2.1 ARIA Labels, Roles und States im Überblick

#### ARIA Labels

| Label-Attribut   | Beschreibung                               | Beispiel                                         |
| ---------------- | ------------------------------------------ | ------------------------------------------------ |
| aria-label       | Direkter Label-Text                        | `<button aria-label="Schließen">√ó</button>`    |
| aria-labelledby  | Referenziert ein anderes Element als Label | `<div aria-labelledby="title">...</div>`         |
| aria-describedby | Zusätzliche beschreibende Information     | `<input aria-describedby="help-text">`           |
| aria-details     | Detaillierte Beschreibung                  | `<button aria-details="full-desc">Mehr</button>` |

#### ARIA Roles

| Role          | Beschreibung          | Beispiel                       |
| ------------- | --------------------- | ------------------------------ |
| banner        | Hauptheader der Seite | `<header role="banner">`       |
| navigation    | Navigationsbereich    | `<nav role="navigation">`      |
| main          | Hauptinhalt           | `<main role="main">`           |
| complementary | Ergänzender Inhalt   | `<aside role="complementary">` |
| search        | Suchfunktion          | `<form role="search">`         |
| alert         | Wichtige Meldung      | `<div role="alert">`           |
| dialog        | Modal-Dialog          | `<div role="dialog">`          |
| tab           | Tab-Element           | `<button role="tab">`          |
| tabpanel      | Tab-Panel             | `<div role="tabpanel">`        |
| menu          | Menü                 | `<ul role="menu">`             |
| menuitem      | Menü-Element         | `<li role="menuitem">`         |

#### ARIA States und Properties

| State/Property | Beschreibung                        | Beispiel                  |
| -------------- | ----------------------------------- | ------------------------- |
| aria-expanded  | Gibt an, ob etwas ausgeklappt ist   | `aria-expanded="true"`    |
| aria-hidden    | Versteckt Element vor Screenreadern | `aria-hidden="true"`      |
| aria-selected  | Zeigt Auswahl-Status                | `aria-selected="true"`    |
| aria-pressed   | Zeigt gedrückten Zustand           | `aria-pressed="true"`     |
| aria-disabled  | Deaktivierter Zustand               | `aria-disabled="true"`    |
| aria-invalid   | Ungültiger Zustand                 | `aria-invalid="true"`     |
| aria-checked   | Checkbox/Radio Status               | `aria-checked="true"`     |
| aria-controls  | Kontrolliert anderes Element        | `aria-controls="panel-1"` |
| aria-live      | Dynamische Updates                  | `aria-live="polite"`      |

### 2.2 Dynamische States im Detail

Dynamische States sind besonders wichtig für interaktive Webanwendungen. Sie informieren Screenreader-Nutzer über Änderungen im Interface:

#### 1. aria-live Regions

Definiert, wie Updates behandelt werden:

```html
<!-- Wichtige, sofortige Ankündigung -->
<div aria-live="assertive">
  Fehler beim Speichern!
</div>

<!-- Höfliche Ankündigung, wenn User nicht beschäftigt -->
<div aria-live="polite">
  Ihre Änderungen wurden gespeichert.
</div>
```

#### 2. aria-busy

Zeigt an, dass sich ein Element aktuell ändert:

```html
<div aria-busy="true">
  Daten werden geladen...
</div>
```

#### 3. Kombinierte States für komplexe UI-Elemente

```html
<!-- Beispiel für einen expandierbaren Button mit Loading-State -->
<button
  aria-expanded="true"
  aria-busy="true"
  aria-controls="panel-1"
>
  Laden...
</button>
<div
  id="panel-1"
  aria-live="polite"
>
  Inhalt wird geladen...
</div>
```

### 2.3 Praktische Tipps für ARIA-States

1. **Aktualisierung der States**

   - States müssen immer den aktuellen Zustand widerspiegeln
   - Änderungen sofort per JavaScript aktualisieren
   - Konsistenz zwischen visuellem und ARIA-State beachten

2. **Performance**

   - Zu viele Live-Regions können Performance-Probleme verursachen
   - Priorisieren Sie wichtige Updates
   - Verwenden Sie "polite" für nicht-kritische Updates

3. **Testing**
   - Testen Sie mit verschiedenen Screenreadern
   - überprüfen Sie die Reihenfolge der Ankündigungen
   - Stellen Sie sicher, dass States korrekt aktualisiert werden

```html
<!-- Landmark Roles -->
<header role="banner">
  <nav role="navigation" aria-label="Hauptnavigation">
    <!-- Navigation -->
  </nav>
</header>

<main role="main">
  <!-- Hauptinhalt -->
</main>

<!-- Live Regions -->
<div role="alert" aria-live="assertive">
  Fehler beim Speichern!
</div>

<div role="status" aria-live="polite">
  Änderungen wurden gespeichert.
</div>

<!-- Dialog -->
<div
  role="dialog"
  aria-labelledby="dialog-title"
  aria-describedby="dialog-desc"
  aria-modal="true"
>
  <h2 id="dialog-title">Bestätigung erforderlich</h2>
  <p id="dialog-desc">Möchten Sie die Änderungen speichern?</p>
  <button onclick="save()">Ja</button>
  <button onclick="cancel()">Nein</button>
</div>
```

### Dynamische ARIA-States

```javascript
// Beispiel für ein Toggle-Menü
const menu = document.querySelector('.menu');
const trigger = document.querySelector('.menu-trigger');

trigger.addEventListener('click', () => {
  const isExpanded = trigger.getAttribute('aria-expanded') === 'true';
  trigger.setAttribute('aria-expanded', !isExpanded);
  menu.hidden = isExpanded;
});
```

---

### 2.4 Checklisten für barrierefreie Entwicklung

#### ARIA und dynamische Inhalte

- [ ] ARIA-Landmarks sind korrekt gesetzt
- [ ] Dynamische Änderungen werden angekündigt
- [ ] ARIA-Labels sind aussagekräftig
- [ ] Live-Regions sind angemessen konfiguriert
- [ ] Modale Dialoge haben korrekte ARIA-Attribute
- [ ] Dynamische Inhalte sind mit Tastatur bedienbar
- [ ] Fokus-Management ist implementiert

---

## 2.5. **Fehlerübersicht und Korrekturen**

Dieser Bereich des Leitfadens wendet die allgemeinen Infos konkret auf die Findings der Website an.
Zur besseren Übersicht wurden die Incidents aus dem technischen Audit in die Oberthemen HTML und ARIA eingruppiert. Ausgegeben werden hier die nebst der Fehler-ID auch die Auswirkung, die Häufigkeit, Beispiel-Urls und eine umfangreiche Problembeschreibung mitsamt deren Lösung sowie einem Beispiel samt Lösung.

Die hier gegebenen Beispiele dienen der Veranschaulichung und stellen potenzielle Lösungsmöglichkeiten dar.

## 2.5.1 **ARAG.DE**

### **Fehler-ID:** aria-command-name

**Auswirkung:** serious

**Anzahl der Vorkommen:** 7

**Beispiel-URLs:**

- https://arag.de/rechtsschutzversicherung/privatrechtsschutz/
- https://arag.de/krankenversicherung-beamte/
- https://arag.de/krankenzusatzversicherung/krankenhauszusatzversicherung/
- https://arag.de/reiseversicherung/top-schutzbrief/
- https://arag.de/services-fuer-alle/

**Problem:** Interaktive Elemente mit ARIA-Attributen, wie Buttons oder Menüeinträge, müssen eine klare und verständliche Beschriftung haben. Fehlt diese, können Screenreader-Benutzer nicht erkennen, was die Schaltfläche bewirkt.

**Lösung:** Ein `aria-label` sollte hinzugefügt oder das Element durch ein natürliches HTML-Element wie `<button>` ersetzt werden.

#### **Beispiel 1 (Original):**

```html
<div class="button ic_chat disabled" role="button">
    <a href="/" title="">Chat starten</a>
</div>
```

#### **Korrigierte Version:**

```html
<button class="button ic_chat" onclick="window.location.href='/'" aria-label="Chat starten">
    Chat starten
</button>
```

---

### **Fehler-ID:** aria-tooltip-name

**Auswirkung:** serious

**Anzahl der Vorkommen:** 141

**Beispiel-URLs:**

- https://arag.de/rechtsschutzversicherung/verkehrsrechtsschutz/
- https://arag.de/rechtsschutzversicherung/mietrechtsschutz/
- https://arag.de/rechtsschutzversicherung/erb-rechtsschutz/
- https://arag.de/private-krankenversicherung/
- https://arag.de/krankenzusatzversicherung/krankenhauszusatzversicherung/

**Problem:** Tooltips mit `role="tooltip"` müssen eine verständliche Beschriftung enthalten. Fehlt diese, wissen Screenreader-Nutzer nicht, welche Zusatzinformationen das Tooltip liefert.

**Lösung:** Ein `aria-label` oder ein sichtbarer Tooltip-Text sollte hinzugefügt werden.

#### **Beispiel 1 (Original):**

```html
<div class="tabInfoOpener" onclick="$NODE.switchClassName(this.parentNode,'open')" tabindex="0" role="tooltip"></div>
```

#### **Korrigierte Version:**

```html
<div class="tabInfoOpener" tabindex="0" role="tooltip" aria-label="Weitere Informationen anzeigen">
    <span class="tooltip-text">Weitere Informationen</span>
</div>
```

---

## **2.5.2 MEINE-ARAG.DE - Fehlerübersicht und Korrekturen**

### **Fehler-ID:** aria-allowed-attribute

**Auswirkung:** serious

**Anzahl der Vorkommen:** 1

**Problem:** Die ARIA-Attribute sind nicht korrekt gesetzt. In diesem Fall wurde das Attribut ```aria-expanded="true"``` in einem ```div``` verwendet, das jedoch keine interaktive Rolle (```button, accordion```, etc.) hat.
              Dies kann dazu führen, dass assistive Technologien falsche Informationen erhalten oder das Element nicht richtig interpretieren.


**Lösung:** Prüfen, ob das Attribut tatsächlich erforderlich ist. Falls das ```div``` kein interaktives Element ist, das Attribut entfernen.
            Falls eine interaktive Funktion benötigt wird, das Element zu einem ```<button>``` oder ```<details>``` umwandeln, welches ```aria-expanded``` korrekt unterstützt.
           Stelle sicher, dass aria-attributes nur auf dafür vorgesehenen Elementen verwendet werden.



#### **Beispiel 1 (Original):**

```html
<div class="klappliste open" open="true" ga-id="Klappliste_0" getonce="true" aria-expanded="true">

```

#### **Korrigierte Version:**

```html
<button class="klappliste open" aria-expanded="true" aria-controls="content">
    Klappliste öffnen
</button>
<div id="content" class="klappliste-inhalt">
    <!-- Inhalt der Klappliste -->
</div>
```

---

### **Fehler-ID:** aria-region

**Auswirkung:** serious

**Anzahl der Vorkommen:** 65

**Problem:** Wichtige Inhaltsbereiche sind nicht als Landmarken gekennzeichnet. Screenreader erkennen sie nicht als Navigation, Hauptinhalt oder ergänzende Information.


**Lösung:** Prüfe, wo Landamarks sinnvoll gesetzt werden können, um Assitenztechnologien zu helfen, die Inhalte besser zu verarbeiten. Wo du keine Landmarks setzen kannst,
            kannst du mit ```aria-roles``` entsprechenden Kontext schaffen.

#### **Beispiele (Original):**

```html
<div id="logoWrap">
```
```html
<div class="phoneNr phone247 clearfix">
    <div class="desktop number">
        0211 9890-1453<br>
        <span>Jederzeit für Sie erreichbar</span>
    </div>
</div>
```
```html
<div class="quicknavi--content">
```

#### **Korrigierte Version:**

```html
<header role="banner" id="logoWrap">
    <img src="logo.png" alt="Firmenlogo">
</header>
```
```html
<aside role="complementary" class="phoneNr phone247 clearfix">
    <div class="desktop number">
        0211 9890-1453<br>
        <span>Jederzeit für Sie erreichbar</span>
    </div>
</aside>
```
```html
<nav role="navigation" class="quicknavi--content" aria-label="Schnellnavigation">
```
---

## 2.5.3 **TARIFRECHNER ALT**

### **Fehler-ID:** aria-region

**Auswirkung:** serious

**Anzahl der Vorkommen:** 127

**Problem:** Wichtige Inhaltsbereiche sind nicht als Landmarken gekennzeichnet. Screenreader erkennen sie nicht als Navigation, Hauptinhalt oder ergänzende Information.


**Lösung:** Prüfe, wo Landamarks sinnvoll gesetzt werden können, um Assitenztechnologien zu helfen, die Inhalte besser zu verarbeiten. Wo du keine Landmarks setzen kannst,
            kannst du mit ```aria-roles``` (```role="region", role="banner", role="complementary"```) entsprechenden Kontext schaffen.

#### **Beispiele (Original):**

```html
<div class="sidebar">
    <p>Weitere Informationen</p>
</div>

```

#### **Korrigierte Version:**

```html
<aside role="complementary">
    <p>Weitere Informationen</p>
</aside>
```
---

### **Fehler-ID:** aria-allowed-role

**Auswirkung:** serious

**Anzahl der Vorkommen:** 3

**Problem:** ARIA-Rollen wurden auf Elementen verwendet, die sie nicht unterstützen.
             Beispiel: role="button" wurde auf einem ```<div>``` verwendet.


**Lösung:** Verwende, wo immer es geht, semantisch korrekte Alternativen. Wo das nicht möglich ist, gib über ARIA mehr Kontext.

#### **Beispiele (Original):**

```html
<div role="button">Klicken</div>
```

#### **Korrigierte Version:**

```html
<button>Klicken</button>
```
```html
<div tabindex="0" role="button" aria-pressed="false">Klicken</div>
```
---

## 2.5.4 **TARIFRECHNER NEU**

### **Fehler-ID:** aria-allowed-role

**Auswirkung:** serious

**Anzahl der Vorkommen:** 2

**Problem:** ARIA-Rollen wurden auf Elementen verwendet, die sie nicht unterstützen.
             Beispiel: role="button" wurde auf einem ```<input>``` verwendet.

**Lösung:** Verwende, wo immer es geht, semantisch korrekte Alternativen. Wo das nicht möglich ist, gib über ARIA mehr Kontext.

#### **Beispiele (Original):**

```html
<input class="select2-focusser select2-offscreen" type="text" aria-haspopup="true" role="button" aria-labelledby="select2-chosen-1">
```

#### **Korrigierte Version:**

```html
<button>Klicken</button>
```
```html
<button aria-haspopup="true" aria-labelledby="select2-chosen-1">Option wählen</button>
```
---

### **Fehler-ID:** aria-region

**Auswirkung:** serious

**Anzahl der Vorkommen:** 124

**Problem:** Wichtige Inhaltsbereiche sind nicht als Landmarken gekennzeichnet. Screenreader erkennen sie nicht als Navigation, Hauptinhalt oder ergänzende Information.


**Lösung:** Prüfe, wo Landamarks sinnvoll gesetzt werden können, um Assitenztechnologien zu helfen, die Inhalte besser zu verarbeiten. Wo du keine Landmarks setzen kannst,
            kannst du mit ```aria-roles``` (```role="region", role="banner", role="complementary"```) entsprechenden Kontext schaffen.

#### **Beispiele (Original):**

```html
<div id="headerDiv" class="header1 showHeader">
```

#### **Korrigierte Version:**

```html
<header id="headerDiv" role="banner" class="header1 showHeader">
```
---

### **Fehler-ID:** landmark-one-main

**Auswirkung:** serious

**Anzahl der Vorkommen:** 6

**Problem:** Keine ```role="main"```-Landmarke vorhanden, was für Screenreader die Navigation erschwert.

**Lösung:** Prüfe, wo Landamarks sinnvoll gesetzt werden können, um Assitenztechnologien zu helfen, die Inhalte besser zu verarbeiten. Wo du keine Landmarks setzen kannst,
            kannst du mit ```aria-roles``` (```role="region", role="banner", role="complementary"```) entsprechenden Kontext schaffen.

#### **Beispiele (Original):**

```html
<div class="content">
    <p>Hauptinhalt</p>
</div>
```

#### **Korrigierte Version:**

```html
<main role="main">
    <p>Hauptinhalt</p>
</main>
```
---
---

## 3. JavaScript und dynamische Inhalte

JavaScript ermöglicht es, Webanwendungen dynamisch und interaktiv zu gestalten, aber ohne sorgfältige Planung kann dies die Barrierefreiheit verschlechtern. Pop-ups, versteckte Inhalte oder dynamisch generierte Elemente können von Screenreadern nicht erkannt oder mit der Tastatur nicht erreichbar sein. Daher müssen Entwickler JavaScript gezielt einsetzen, um die Bedienbarkeit für alle Nutzergruppen zu verbessern.

## 3.1 Navigation

### 3.1.1 Fokusmanagement

Beim Navigieren einer Webseite mit der Tastatur oder einem Screenreader springt der Fokus von einem interaktiven Element (z. B. einem Link oder Button) zum nächsten. Dynamische Inhalte, Modale (Dialoge), Formulare und Navigationen können jedoch den Fokus unerwartet verlieren oder sich nicht sinnvoll anpassen. Ohne ein durchdachtes Fokusmanagement kann ein Nutzer auf der Seite „stecken bleiben“ oder gar nicht erst mit bestimmten Inhalten interagieren.

Folgendes Beispiel veranschaulicht das Fokusmanagement für ein Modal.

```javascript
// Fokusmanagement für ein Modal
class Modal {
  constructor(element) {
    this.modal = element;
    this.focusableElements = this.modal.querySelectorAll(
      'button, [href], input, select, textarea, [tabindex]:not([tabindex="-1"])'
    );
    this.firstFocusable = this.focusableElements[0];
    this.lastFocusable = this.focusableElements[this.focusableElements.length - 1];
    this.previouslyFocused = null;
  }

  open() {
    this.previouslyFocused = document.activeElement;
    this.modal.hidden = false;
    this.firstFocusable.focus();
    this.trapFocus();
  }

  close() {
    this.modal.hidden = true;
    if (this.previouslyFocused) {
      this.previouslyFocused.focus();
    }
  }

  trapFocus() {
    this.modal.addEventListener('keydown', (e) => {
      if (e.key !== 'Tab') return;

      if (e.shiftKey) {
        if (document.activeElement === this.firstFocusable) {
          e.preventDefault();
          this.lastFocusable.focus();
        }
      } else {
        if (document.activeElement === this.lastFocusable) {
          e.preventDefault();
          this.firstFocusable.focus();
        }
      }
    });
  }
}
```

### 3.1.2 Tastaturnavigation

Beim Navigieren einer Webseite mit der Tastatur oder einem Screenreader springt der Fokus von einem interaktiven Element (z. B. einem Link oder Button) zum nächsten. Dynamische Inhalte, Modale (Dialoge), Formulare und Navigationen können jedoch den Fokus unerwartet verlieren oder sich nicht sinnvoll anpassen. Ohne ein durchdachtes Fokusmanagement kann ein Nutzer auf der Seite „stecken bleiben“ oder gar nicht erst mit bestimmten Inhalten interagieren.


#### Event-Listener für keydown und nicht nur für click verwenden

```javascript
document.querySelector('.button').addEventListener('keydown', function(event) {
    if (event.key === 'Enter' || event.key === ' ') {
        this.click();
    }
});
```

#### Escape-Taste für Modale und Overlays implementieren

```javascript
document.addEventListener('keydown', function(event) {
    if (event.key === 'Escape') {
        document.getElementById('modal').style.display = 'none';
    }
});
```

### 3.1.3 ARIA - Labelling

Screenreader benötigen zusätzliche Informationen, um dynamische oder komplexe Inhalte korrekt zu interpretieren. HTML allein reicht oft nicht aus, um Nutzern den Sinn eines Elements zu erklären. ARIA (Accessible Rich Internet Applications) bietet eine Möglichkeit, Elemente mit zusätzlichen Beschreibungen zu versehen.



#### Nutze aria-expanded für klappbare Elemente

```html
<button id="menuButton" aria-expanded="false">Menü öffnen</button>
<div id="menu" hidden>Menüinhalt</div>
```
```javascript
document.getElementById('menuButton').addEventListener('click', function() {
    const menu = document.getElementById('menu');
    const isExpanded = this.getAttribute('aria-expanded') === 'true';
    this.setAttribute('aria-expanded', !isExpanded);
    menu.hidden = isExpanded;
});
```

### 3.2 Progressive Enhancement

Progressive Enhancement ist ein fundamentales Konzept der Webentwicklung, das besonders für die Barrierefreiheit wichtig ist. Der Ansatz basiert darauf, zunächst eine solide Grundfunktionalität bereitzustellen und diese dann schrittweise um erweiterte Funktionen zu ergänzen.

### Das Konzept im Detail

1. **Basis-Schicht: HTML**

   - Semantisch korrektes HTML
   - Alle Inhalte sind verfügbar
   - Funktioniert ohne CSS und JavaScript
   - Beispiel: Ein Formular, das auch ohne JavaScript absendbar ist

2. **Erweiterte Schicht: CSS**

   - Verbesserte Darstellung
   - Responsive Design
   - Visuelle Verbesserungen
   - Beispiel: Hover-Effekte, Animationen

3. **Optimierungs-Schicht: JavaScript**
   - Erweiterte Interaktivität
   - Dynamische Updates
   - Verbesserte User Experience
   - Beispiel: Live-Validierung, Auto-Complete

### Bedeutung für Barrierefreiheit

1. **Robustheit**

   - Funktioniert auch bei deaktiviertem JavaScript
   - Unterstützt ältere Browser und Geräte
   - Fallback-Lösungen sind integriert

2. **Zugänglichkeit**

   - Grundfunktionen immer verfügbar
   - Weniger Abhängigkeit von spezifischen Technologien
   - Bessere Unterstützung von assistiven Technologien

3. **Performance**
   - Schnelleres Initial Loading
   - Bessere Performance auf schwachen Geräten
   - Reduzierte Abhängigkeit von Netzwerkqualität

### Praktische Umsetzung

```html
<!-- Basis: Funktionales HTML-Formular -->
<form action="/submit" method="post">
  <label for="search">Suche:</label>
  <input type="search" id="search" name="q">
  <button type="submit">Suchen</button>
</form>

<style>
/* Enhancement: Verbesserte Darstellung */
.search-container {
  position: relative;
}

.search-results {
  display: none;
  position: absolute;
  top: 100%;
  left: 0;
  width: 100%;
  background: white;
  border: 1px solid #ccc;
}

.search-results.visible {
  display: block;
}
</style>

<script>
// Enhancement: Live-Suche mit JavaScript
document.getElementById('search').addEventListener('input', async (e) => {
  if (!e.target.value) return;

  try {
    const results = await fetchSearchResults(e.target.value);
    updateSearchResults(results);
  } catch (error) {
    // Fallback zur normalen Formular-Submission bei Fehlern
    console.error('Live-Suche nicht verfügbar');
  }
});
</script>
```

### 3.3 Best Practices

1. **Feature Detection**

   ```javascript
   if ('IntersectionObserver' in window) {
     // Moderne Funktionalität verwenden
   } else {
     // Fallback-Lösung
   }
   ```

2. **Graceful Degradation**

   ```javascript
   // Prüfen ob JavaScript verfügbar ist
   document.documentElement.classList.replace('no-js', 'js');
   ```

3. **Unabhängige Grundfunktionalität**

   ```html
   <!-- Basis-Funktionalität -->
   <a href="/details/1">Mehr Details</a>

   <!-- JavaScript Enhancement -->
   <script>
   document.querySelector('a').addEventListener('click', (e) => {
     e.preventDefault();
     // AJAX-Laden der Details
     loadDetailsAsync();
   });
   </script>
   ```

4. **Beispiel für Progressive Enhancement**

```javascript
class TabInterface {
  constructor(element) {
    this.tablist = element;
    this.tabs = [...this.tablist.querySelectorAll('[role="tab"]')];
    this.panels = this.tabs.map(tab =>
      document.getElementById(tab.getAttribute('aria-controls'))
    );

    // Grundlegende Zugänglichkeit auch ohne JavaScript
    if (!this.tabs.length) return;

    // Erweiterte Funktionalität mit JavaScript
    this.init();
  }

  init() {
    // Tabs initial verstecken außer dem ersten
    this.panels.forEach((panel, index) => {
      panel.hidden = index !== 0;
    });

    // Event Listener hinzufügen
    this.tabs.forEach(tab => {
      tab.addEventListener('click', e => this.switchTab(e));
      tab.addEventListener('keydown', e => this.handleKeyDown(e));
    });
  }

  switchTab(event) {
    const targetTab = event.currentTarget;
    const targetPanel = document.getElementById(
      targetTab.getAttribute('aria-controls')
    );

    // Aktiven Status aktualisieren
    this.tabs.forEach(tab => {
      tab.setAttribute('aria-selected', tab === targetTab);
      tab.tabIndex = tab === targetTab ? 0 : -1;
    });

    // Panels aktualisieren
    this.panels.forEach(panel => {
      panel.hidden = panel !== targetPanel;
    });
  }

  handleKeyDown(event) {
    const targetTab = event.currentTarget;
    const currentIndex = this.tabs.indexOf(targetTab);
    let newTab;

    switch(event.key) {
      case 'ArrowLeft':
        newTab = this.tabs[currentIndex - 1] || this.tabs[this.tabs.length - 1];
        break;
      case 'ArrowRight':
        newTab = this.tabs[currentIndex + 1] || this.tabs[0];
        break;
      default:
        return;
    }

    event.preventDefault();
    newTab.focus();
    newTab.click();
  }
}
```

### 3.4 Checklisten für barrierefreie Entwicklung

#### Progressive Enhancement

- [ ] Basis-Funktionalität ohne JavaScript
- [ ] Grundlegende Styles ohne moderne CSS-Features
- [ ] Fallback-Lösungen für komplexe Interaktionen
- [ ] Inhalte sind ohne JavaScript zugänglich
- [ ] Formularvalidierung funktioniert serverseitig
- [ ] Kritische Funktionen haben Fallbacks


## 4. Mobile Barrierefreiheit

Mobile Barrierefreiheit hat einige spezifische Herausforderungen und Anforderungen, die sich von der Desktop-Entwicklung unterscheiden. Hier sind die wichtigsten Unterschiede und Besonderheiten:

### 4.1 Wesentliche Unterschiede zur Desktop-Entwicklung

1. **Eingabemethoden**

   - Touch statt Maus
   - Keine Hover-States
   - Verschiedene Gesten
   - Bildschirmtastatur

2. **Bildschirmgröße**

   - Begrenzte Anzeigefläche
   - Notwendigkeit für responsive Designs
   - Unterschiedliche Pixeldichten
   - Verschiedene Bildschirmformate

3. **Kontext**
   - Wechselnde Lichtverhältnisse
   - Oft einhändige Bedienung
   - Unterbrechungen häufiger
   - Eingeschränkte Bandbreite

### Spezifische Anforderungen für Mobile Entwicklung

1. **Touch Targets**

   ```css
   /* Mindestgröße für Touch-Targets */
   .touch-element {
     min-width: 44px;    /* iOS Minimum */
     min-height: 44px;
     padding: 12px;
   }

   /* Ausreichend Abstand zwischen Touch-Targets */
   .touch-element + .touch-element {
     margin-left: 8px;
   }
   ```

2. **Responsive Typography**

   ```css
   /* Fluid Typography */
   :root {
     --min-font-size: 16px;
     --max-font-size: 20px;
     --min-viewport-width: 320px;
     --max-viewport-width: 1200px;
   }

   body {
     font-size: clamp(
       var(--min-font-size),
       calc(16px + 2vw),
       var(--max-font-size)
     );
   }
   ```

3. **Orientierung**

   ```css
   /* Flexibles Layout für verschiedene Orientierungen */
   @media screen and (orientation: portrait) {
     .container {
       flex-direction: column;
     }
   }

   @media screen and (orientation: landscape) {
     .container {
       flex-direction: row;
     }
   }
   ```

### 4.2 Mobile-spezifische Accessibility Features

1. **Pinch-to-Zoom**

   ```css
   /* Zoom nie deaktivieren */
   html {
     touch-action: manipulation; /* Bessere Touch-Handhabung */
     -webkit-text-size-adjust: 100%; /* Verhindert iOS Font-Size Anpassung */
   }
   ```

2. **Mobile Screenreader Support**

   ```html
   <!-- Bessere VoiceOver/TalkBack Unterstützung -->
   <button
     aria-label="Menü öffnen"
     role="button"
     tabindex="0"
     onclick="toggleMenu()"
   >
     <span class="sr-only">Menü</span>
     <span aria-hidden="true">Menü</span>
   </button>
   ```

3. **Reduced Motion**
   ```css
   @media (prefers-reduced-motion: reduce) {
     * {
       animation: none !important;
       transition: none !important;
     }
   }
   ```

### Besondere Herausforderungen

1. **Keyboards und Formulare**

   - Passende Input-Types verwenden
   - Autofill unterstützen
   - Tastatur-Trigger optimieren

2. **Gesten und Alternativen**

   - Alternative für komplexe Gesten
   - Einfache Tap-Alternativen
   - Klare Feedback-Mechanismen

3. **Performance**
   - Reduzierte Bandbreite beachten
   - Ressourcen optimieren
   - Progressive Enhancement

```css
/* Ausreichend große Touch-Targets */
.button {
  min-width: 44px;  /* iOS Minimum */
  min-height: 44px;
  padding: 12px;
  margin: 8px;
}

/* Genügend Abstand zwischen interaktiven Elementen */
.interactive-element {
  margin: 12px;
  padding: 8px;
}

/* Responsive Text-Größen */
:root {
  --base-font-size: 16px;
}

@media screen and (min-width: 768px) {
  :root {
    --base-font-size: 18px;
  }
}

body {
  font-size: var(--base-font-size);
  line-height: 1.5;
}

/* Flexibles Layout */
.container {
  max-width: 100%;
  padding: 16px;
  margin: 0 auto;
}

@media screen and (min-width: 1024px) {
  .container {
    max-width: 960px;
  }
}
```

---

### 4.3 Checklisten für barrierefreie Entwicklung

#### Mobile Zugänglichkeit

- [ ] Zoom des Browsers ist nicht deaktiviert
- [ ] Inhalte sind bei 200% Zoom prüfbar
- [ ] Inhalte sind bei 320px Breite prüfbar
- [ ] Gerät kann in jede Richtung gedreht werden
- [ ] Kein horizontaler Bildlauf nötig
- [ ] Ausreichender Abstand zwischen interaktiven Elementen
- [ ] Touch-Targets sind mindestens 44x44px groß

---

## 5. Testing

### 5.1 automatisiertes Testing

### 5.1.1 Einführung

Dieser Leitfaden konzentriert sich auf Aspekte der Barrierefreiheit, die zwingend manuell getestet werden müssen und nicht durch automatische Tests abgedeckt werden können. Besonderer Fokus liegt auf der Überprüfung der Screenreader-Kompatibilität, Tastaturnutzung und der gleichwertigen Verfügbarkeit aller Funktionen.
Probleme die grundsätzlich Auftreten können, wurden im vorherigen Teil beschrieben. Folgend wird dargelegt wie man diese mit dem Screenreader testen und Incidents identifizieren kann.

#### Wichtig zu wissen
- Automatische Tests können nur etwa 30% der Barrierefreiheitsprobleme erkennen
- Die manuelle Prüfung ist essentiell für die Bewertung von:
  - Screenreader-Ausgabe und Verständlichkeit
  - Tastaturnavigation und -bedienung
  - Gleichwertige Verfügbarkeit aller Funktionen und Informationen
  - Sinnhaftigkeit von ARIA-Attributen und Landmarks

#### Benötigte Tools
- Bildschirmleseprogramm (z.B. NVDA für Windows, VoiceOver für macOS)
 - Eine detailreiche Einführung mit Trainingsmöglichkeiten findet ihr hier:
  - NVDA
  - Windows Screenreader
  - VoiceOver


#### Erste Schritte
Sobald dein Screenreader läuft und du dich mit der grundlegenden Navigation vertraut gemacht hast, kann das systematische Testing beginnen. Die folgenden Bereiche führen dich Schritt für Schritt durch alle wichtigen Aspekte, die manuell geprüft werden müssen. Gehe dabei strukturiert vor und dokumentiere auffällige Punkte direkt - dies hilft später bei der Nachverfolgung und Behebung von Problemen.

### 5.1.2 Manuelle Prüfbereiche

### 5.1.2.1 Screenreader-Kompatibilität und Verständlichkeit

#### Ansteuerbarkeit
- Teste die generelle Ansteuerbarkeit
  - [ ] Sind alle interaktiven Elemente erreichbar?
  - [ ] Funktionieren Screenreader-Tastenkombinationen?
  - [ ] Gibt es "tote" Bereiche in der Navigation?
  - [ ] Werden richtige Rollen und Eigenschaften erkannt?

#### Semantische Struktur
- Prüfe, ob alle interaktiven Elemente korrekt vorgelesen werden
- [ ]  Prüfe, ob die Dokumentenstruktur logisch aufgebaut ist
- [ ]  Kontrolliere, ob Überschriften den Inhalt aussagekräftig repräsentieren
- [ ]  Kontrolliere, ob Links aussagekräftig geschrieben sind
- [ ]  Stelle sicher, dass Landmarks sinnvoll eingesetzt werden
- [ ]  Überprüfe die korrekte Verschachtelung von Elementen
  - [ ]  Werden Elemente mehrfach angesteuert und vorgelesen? Falls ja, kann eine falsche Verschachtelung vorliegen



#### ARIA und Ausblendungen
- [ ]  Prüfe den Einsatz von aria-hidden
  - [ ]  Werden wichtige Inhalte fälschlicherweise ausgeblendet?
  - [ ]  Sind dekorative Elemente korrekt versteckt, so dass sie nicht vorgelesen werden?
- [ ]  Kontrolliere aria-label und aria-describedby
  - [ ]  Sind alle Formularelemente mit einem Label versehen, welches von Screenreadern erfasst werden kann?
  - [ ]  Sind die Beschreibungen verständlich und hilfreich?
  - [ ]  Ergeben sie im Kontext Sinn?
- [ ]  Überprüfe Live-Regionen
  - [ ]  Werden wichtige Updates angekündigt?
  - [ ]  Ist die Priorisierung angemessen?

#### Alternativtexte und Beschreibungen
- [ ]  Prüfe die Qualität von Alternativtexten
  - [ ]  Beschreiben sie Inhalt und Funktion?
  - [ ]  Sind sie für Screenreader-Nutzer verständlich?
- [ ]  Kontrolliere komplexe Interaktionen
  - [ ]  Werden Statusänderungen kommuniziert?
  - [ ]  Sind Fehlermeldungen zugänglich?
- [ ]  Werden zum Verständnis weitere Informationen für Screenreader benötigt?

### Überprüfe komplexe Interaktionen

#### Overlays und Dialoge
- [ ]  Prüfe die Zugänglichkeit
  	- [ ]  Werden sie beim Öffnen automatisch fokussiert?
  	- [ ]  Können alle Elemente innerhalb erreicht werden?
  	- [ ]  Ist die Schließen-Funktion zugänglich?

#### Alerts und Benachrichtigungen
- [ ]  Prüfe die Zugänglichkeit
  - [ ]  Werden sie korrekt angekündigt?
  - [ ]  Überprüfe dynamische Inhalte
  - [ ]  Werden neue Inhalte erkannt und angesteuert?
  - [ ]  Funktioniert die Navigation in dynamisch nachgeladenen Bereichen?
  - [ ]  Werden Änderungen sinnvoll kommuniziert?
- [ ]  Kontrolliere die Verständlichkeit
	- [ ]  Sind die Texte aussagekräftig und hilfreich?

#### Tabellenprüfung
- [ ] Prüfe die semantische Struktur
 - [ ] Ist der Tabellenkopf korrekt ausgezeichnet?
 - [ ] Werden Spalten- und Zeilenüberschriften richtig zugeordnet?
- [ ] Kontrolliere die Verständlichkeit
  - [ ] Ist die Tabellenüberschrift aussagekräftig (caption)?
  - [ ] Werden Beziehungen zwischen Zellen korrekt vorgelesen?
  - [ ] Sind verschachtelte Tabellen nachvollziehbar?
- [ ] Überprüfe die Navigation
  - [ ] Funktionieren die Screenreader-Tastenkombinationen für Tabellen?
  - [ ] Ist die Orientierung in der Tabelle möglich?
  - [ ] Werden Spalten- und Zeilenpositionen korrekt angesagt?
- [ ] Teste komplexe Tabellen
  - [ ] Sind zusammengeführte Zellen richtig gekennzeichnet?
  - [ ] Werden Gruppierungen (thead, tbody, tfoot) erkannt?
  - [ ] Sind Datenzellen ihren Überschriften zuordenbar?

Weitere komplexe Interaktionen und Patterns sind nach diesem Prinzip zu testen.
  - [ ] Sind alle Elemente erreichbar und bedienbar?
  - [ ] Sind alle Informationen für Screenreader zugänglich?

### 5.1.2.2 Tastaturnutzung und Navigation

#### Grundlegende Navigation
- [ ]  Prüfe die Tab-Reihenfolge
  - [ ]  Ist sie logisch und nachvollziehbar?
  - [ ]  Entspricht sie dem visuellen Layout?
- [ ]  Kontrolliere den Fokus-Indikator
  - [ ]  Ist er jederzeit sichtbar?
  - [ ]  Ist er ausreichend kontrastreich?
- [ ]  Überprüfe Skip-Links
  - [ ]  Sind sie beim ersten Tab-Schritt verfügbar?
  - [ ]  Funktionieren sie wie erwartet?

#### Interaktive Elemente
- [ ]  Teste alle Bedienelemente
  - [ ]  Sind sie mit Tastatur aktivierbar?
  - [ ]  Werden erwartete Tastenkombinationen unterstützt?
- [ ]  Prüfe komplexe Komponenten
  - [ ]  Können Inputvarianten wie Kombo-Inputfelder und Datumsauswahl korrekt benutzt werden?
  - [ ]  Können eingebundene Inhalte wie Videos, Maps und iframes korrekt angesteuert und bedient werden?

#### Fokus-Management
- [ ]  Kontrolliere Fokus-Fallen
  - [ ]  Gibt es Bereiche, aus denen man nicht "heraus-tabben" kann?
  - [ ]  Wird der Fokus bei Modaldialogen korrekt gefangen?
- [ ]  Prüfe dynamische Inhalte
  - [ ]  Wird der Fokus nach Aktualisierungen sinnvoll gesetzt?
  - [ ]  Bleiben Nutzer nach Aktionen orientiert?

### 5.1.2.3 Gleichwertige Verfügbarkeit

#### Funktionalität
- [ ]  Prüfe, ob alle Funktionen zugänglich sind
  - [ ]  Gibt es Aktionen, die nur mit Maus möglich sind?
  - [ ]  Sind alle Informationen auch ohne Hover verfügbar?
- [ ]  Kontrolliere alternative Bedienkonzepte
  - [ ]  Gibt es Alternativen für Gesten mittels einer einfachen Zeigereingabe?

#### Informationszugang
- [ ]  Sind alle Informationen für alle Assistenzsysteme erfassbar und zugänglich?
- [ ]  Überprüfe versteckte Inhalte
  - [ ]  Sind Tooltip-Informationen auch anders verfügbar?
  - [ ]  Sind Hover-Texte zugänglich?
- [ ]  Prüfe Multimedia-Inhalte
  - [ ]  Gibt es Untertitel und Transkripte?
  - [ ]  Sind Audiobeschreibungen vorhanden?

### 5.1.2.4 Dokumentation

#### Fehlerprotokoll
Dokumentiere für jeden manuell gefundenen Fehler:
1. Beschreibung des Problems
2. Schritte zur Reproduktion
3. Verwendete Hilfsmittel (Screenreader, Browser)
4. Schweregrad und Auswirkung auf Nutzer

#### Best Practices
- [ ]  Teste regelmäßig mit verschiedenen Screenreadern
- [ ]  Prüfe komplette Prozesse mit Tastatur
- [ ]  Dokumentiere problematische Patterns
- [ ]  Erstelle Testszenarien für typische Nutzungsmuster

## 5.1.3 Checkliste für effizientes manuelles Testing

### Tägliche Checks
1. Prüfe neue Funktionen mit Screenreader
2. Teste Tastaturzugänglichkeit
3. Kontrolliere ARIA-Attribute
4. Überprüfe Fokus-Management

###  Weitere Checks
1. Teste komplette User Journeys
2. Prüfe komplexe Interaktionen
3. Kontrolliere dynamische Updates
4. Überprüfe gleichwertige Verfügbarkeit

### 5.1.4 Schlussfolgerung
Manuelles Testing ist unerlässlich für die Sicherstellung echter Barrierefreiheit. Nur durch systematische Prüfung der Screenreader-Ausgabe, Tastaturnutzung und gleichwertigen Verfügbarkeit kann sichergestellt werden, dass eine Webseite tatsächlich für alle Nutzergruppen zugänglich ist.


### 5.2 Automatisiertes Testing

### 5.2.1 Was ist automatisiertes Testing auf Barrierefreiheit?

Automatisierte Tests sind Software-gestützte Prüfverfahren, die digitale Inhalte und Anwendungen auf Konformität mit gängigen Barrierefreiheitsstandards wie den Web Content Accessibility Guidelines (WCAG) oder gesetzlichen Vorgaben wie der EU-Richtlinie 2016/2102 und dem Barrierefreiheitsstärkungsgesetz (BFSG) analysieren. Dabei kommen spezialisierte Testwerkzeuge wie axe DevTools, WAVE, Lighthouse, Pa11y oder Tenon zum Einsatz, die Webseiten und Anwendungen automatisch auf Barrieren überprüfen.

Diese Tools können beispielsweise folgende Aspekte analysieren:

- Fehlende oder inkorrekte Alternativtexte für Bilder
- Unzureichende Kontraste zwischen Text und Hintergrund
- Falsche oder fehlende HTML-Semantik (z. B. korrekte Nutzung von Überschriften und ARIA-Attributen)
- Probleme mit der Tastaturnavigation
- Fehlerhafte oder fehlende Beschriftungen für Formularelemente
- Verwendung von blinkenden oder sich schnell bewegenden Inhalten, die Anfälle auslösen könnten
- Durch automatisiertes Testing lassen sich solche Barrieren schnell und effizient erkennen, wodurch Entwicklungsprozesse optimiert und frühzeitig Barrierefreiheitsprobleme adressiert werden können.

### 5.2.2 Grenzen und Limitationen des automatisierten Testings
Obwohl automatisierte Tests viele Barrierefreiheitsprobleme erkennen können, gibt es auch erhebliche Einschränkungen, die eine ergänzende manuelle Prüfung erforderlich machen.

#### 1. Keine Bewertung der Nutzerfreundlichkeit
Automatisierte Tests können technische Fehler identifizieren, aber nicht bewerten, wie gut eine Anwendung tatsächlich nutzbar ist. Beispielsweise können sie nicht prüfen, ob eine Navigation für blinde Nutzer logisch aufgebaut ist oder ob eine komplexe Interaktion für Menschen mit motorischen Einschränkungen praktikabel ist.

#### 2. Eingeschränkte Erkennung semantischer Fehler
Während ein Tool überprüfen kann, ob ein Bild einen Alternativtext besitzt, kann es nicht beurteilen, ob dieser Text sinnvoll und beschreibend ist. Gleiches gilt für Überschriftenstrukturen oder Linktexte – eine automatische Prüfung erkennt, ob sie vorhanden sind, aber nicht, ob sie verständlich und aussagekräftig sind.

#### 3. Probleme mit dynamischen Inhalten
Moderne Webanwendungen nutzen häufig JavaScript, AJAX und interaktive Elemente. Automatisierte Tests haben Schwierigkeiten, dynamisch nachgeladene Inhalte oder komplexe Webkomponenten wie modale Dialoge, interaktive Karten oder Drag-and-Drop-Funktionen korrekt zu analysieren.

#### 4. Fehlende Prüfung von assistiven Technologien
Menschen mit Behinderungen nutzen oft Screenreader, Sprachsteuerungen oder alternative Eingabegeräte. Automatische Tests können nicht simulieren, wie gut eine Anwendung mit diesen Technologien interagiert – hier sind manuelle Tests durch betroffene Nutzer unerlässlich.

#### 5. Falsch-positive oder Falsch-negative Ergebnisse
Einige automatisierte Tests neigen dazu, Fehlalarme (False Positives) auszugeben oder problematische Bereiche zu übersehen (False Negatives). Beispielsweise könnte ein Tool fälschlicherweise annehmen, dass eine Website barrierefrei ist, weil alle HTML-Strukturen formal korrekt sind, obwohl in der realen Nutzung gravierende Barrieren bestehen.


### 5.2.3 Automatisierte Tests - Beispieleinbindung

````javascript
// Beispiel für einen einfachen Accessibility-Test mit Jest
describe('Accessibility Tests', () => {
  test('Alle Bilder haben Alt-Texte', () => {
    document.querySelectorAll('img').forEach(img => {
      expect(img.hasAttribute('alt')).toBe(true);
    });
  });

  test('Alle Formularfelder haben Labels', () => {
    document.querySelectorAll('input, select, textarea').forEach(field => {
      const hasLabel = document.querySelector(`label[for="${field.id}"]`);
      const hasAriaLabel = field.getAttribute('aria-label');
      const hasAriaLabelledBy = field.getAttribute('aria-labelledby');

      expect(
        hasLabel || hasAriaLabel || hasAriaLabelledBy
      ).toBeTruthy();
    });
  });
});

// Beispiel für axe-core Integration
import { axe } from 'axe-core';

describe('Automated accessibility tests', () => {
  it('should not have any automatically detectable accessibility issues', async () => {
    const results = await axe(document.body);
    expect(results.violations).toHaveLength(0);
  });
});
````

### Best Practices für kontinuierliches Testing

1. **Automatisierte Tests in CI/CD Pipeline**

```yaml
# Example GitHub Actions Workflow
name: Accessibility Tests
on: [push, pull_request]

jobs:
  a11y:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Install dependencies
        run: npm install
      - name: Run accessibility tests
        run: npm run test:a11y
      - name: Check HTML validity
        run: npm run test:html
      - name: Generate accessibility report
        run: npm run report:a11y
```

2. **Monitoring und Logging**

```javascript
// Beispiel für Accessibility-Logging
class A11yLogger {
  static log(violation) {
    console.error(`
      Accessibility Violation:
      Rule: ${violation.id}
      Impact: ${violation.impact}
      Description: ${violation.description}
      Elements: ${violation.nodes.map(node => node.target).join(', ')}
    `);

    // Senden an Monitoring-System
    this.sendToMonitoring({
      type: 'a11y_violation',
      data: violation,
      timestamp: new Date().toISOString()
    });
  }

  static sendToMonitoring(data) {
    // Implementation für Monitoring-System
  }
}

// Verwendung mit axe-core
axe.run(document).then(results => {
  results.violations.forEach(violation => {
    A11yLogger.log(violation);
  });
});
````

## 6. Zusammenfassung und Weitere Ressourcen

### 6.1 Wichtige Werkzeuge

1. **Browser-Entwicklertools**

   - Chrome Accessibility Inspector
   - Firefox Accessibility Inspector
   - Safari Accessibility Inspector

2. **Testing-Tools**

   - axe-core
   - WAVE
   - Lighthouse
   - pa11y

3. **Screenreader**
   - NVDA (Windows)
   - VoiceOver (macOS)
   - JAWS (Windows)
   - TalkBack (Android)

### 6.2 Nützliche Links und Referenzen

1. W3C Web Accessibility Initiative (WAI)

   - [WCAG 2.1 Richtlinien](https://www.w3.org/TR/WCAG21/)
   - [WAI-ARIA Practices](https://www.w3.org/WAI/ARIA/apg/)

2. Deutschsprachige Ressourcen

   - [BITV 2.0](https://www.gesetze-im-internet.de/bitv_2_0/)
   - [Barrierefreie-Informationstechnik-Verordnung](https://www.gesetze-im-internet.de/bitv_2_0/)

3. Tools und Frameworks
   - [axe-core auf GitHub](https://github.com/dequelabs/axe-core)
   - [Pa11y](https://pa11y.org/)
   - [Lighthouse](https://developers.google.com/web/tools/lighthouse/)

