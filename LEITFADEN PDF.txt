**Leitfaden zur Erstellung barrierefreier PDFs aus Word-Vorlagen mit iText**

## Einleitung
Barrierefreiheit in PDFs ist essenziell, um Dokumente für alle Menschen, einschließlich Menschen mit Behinderungen, zugänglich zu machen. Dies betrifft insbesondere Screenreader-Nutzer, die auf eine korrekt strukturierte und semantisch aufbereitete Datei angewiesen sind.

Die Umwandlung von Word-Dokumenten in barrierefreie PDFs mit iText erfordert die richtige Dokumentstruktur, Tags, alternative Texte für Bilder, eine durchdachte Tab-Reihenfolge und weitere Maßnahmen.

---
## **1. Prozessüberblick**
### **1.1 Schritte zur Erstellung eines barrierefreien PDFs**
1. **Vorbereitung der Word-Vorlage**
   - Nutzung von Formatvorlagen für Überschriften, Absätze und Listen
   - Alternative Texte für Bilder hinterlegen
   - Tabellen korrekt formatieren (Header-Zellen, keine leeren Spalten oder Zeilen)
2. **Export nach PDF und Nachbearbeitung mit iText**
   - PDF-Dokument mit iText einlesen
   - Tags für Strukturbaum hinzufügen
   - Tab- und Lesereihenfolge festlegen
   - Formularfelder und Links kennzeichnen
3. **Validierung der Barrierefreiheit**
   - Nutzung von Adobe Acrobat Pro oder PAC 3 für Tests
   - Überprüfung mit Screenreadern wie NVDA oder JAWS

---
## **2. Technische Umsetzung mit iText**

### **2.1 Typische Rollentypen und Properties in barrierefreien PDFs**

#### **2.1.1 Rollentypen**
| Name     | Beschreibung                         |
|----------|-------------------------------------|
| P        | Absatz                              |
| H1       | Überschrift 1. Ordnung             |
| H2       | Überschrift 2. Ordnung             |
| H3       | Überschrift 3. Ordnung             |
| Table    | Tabelle                             |
| TR       | Tabellenzeile                       |
| TD       | Tabellenzelle                       |
| L        | Liste                               |
| LI       | Listeneintrag                       |
| Span     | Inline-Text                         |
| Figure   | Bild oder Grafik                    |
| Artifact | Nicht-lesbare Elemente wie Linien oder Seitenzahlen |

#### **2.1.2 Properties**

| Name                         | Beschreibung                                       |
|------------------------------|---------------------------------------------------|
| setFont()                    | Schriftart setzen                                 |
| setFontSize()                | Schriftgröße setzen                              |
| setBold()                    | Fettformatierung                                 |
| setItalic()                  | Kursivformatierung                               |
| setTextAlignment()           | Textausrichtung setzen (LEFT, CENTER, JUSTIFIED) |
| setBackgroundColor()         | Hintergrundfarbe setzen                          |
| setBorder()                  | Rahmen für Elemente setzen                       |
| setMargins()                 | Ränder setzen                                   |
| setPadding()                 | Innenabstand setzen                             |
| setTitle()                   | Dokumenttitel setzen                            |
| setAuthor()                  | Autor des Dokuments                             |
| setSubject()                 | Betreff/Thema des PDFs                          |
| setKeywords()                | Schlüsselwörter für Suche                       |
| setCreator()                 | Ersteller des PDFs                              |
| setProducer()                | PDF-Erzeugungssoftware                          |
| setCreationDate()            | Erstellungsdatum setzen                        |
| setModificationDate()        | Änderungsdatum setzen                          |
| setRole()                    | Semantische Rolle setzen                        |
| setAlternateDescription()    | Alternative Beschreibung für Bilder             |
| setLanguage()                | Dokument- oder Textelement-Sprache setzen       |
| setExpansion()               | Langtext für Abkürzungen oder Symbole           |
| setActualText()              | Alternativen Text für Barrierefreiheit         |
| setTag()                     | Tag für Strukturierung setzen                   |

---

### **2.2 Dokumentensprache setzen**
Die Dokumentensprache ist essenziell für Screenreader, da sie die richtige Sprachausgabe gewährleistet. Falls eine Sprache nicht gesetzt ist, kann es zu fehlerhaften Ausgaben kommen.

Der folgende Code setzt die Sprache eines PDF-Dokuments auf Deutsch:
```java
PdfDocument pdfDoc = new PdfDocument(new PdfWriter("barrierefreies_dokument.pdf"));
pdfDoc.getCatalog().setLang(new PdfString("de-DE"));
pdfDoc.close();
```
Hier wird `setLang()` verwendet, um dem Dokument die Sprache zuzuweisen. `PdfString("de-DE")` gibt an, dass es sich um ein deutschsprachiges Dokument handelt.

---
### **2.3 Tags & Strukturbaum definieren**
Tags sind essenziell, um die semantische Struktur eines Dokuments festzulegen. Ohne Tags ist ein PDF für Screenreader unlesbar.

Der folgende Code zeigt, wie ein Dokument mit einer strukturierten Baumstruktur erstellt wird:
```java
PdfDocument pdfDoc = new PdfDocument(new PdfWriter("strukturbaum.pdf"));
pdfDoc.setTagged();
PdfDocumentInfo info = pdfDoc.getDocumentInfo();
info.setTitle("Barrierefreies PDF");
PdfStructTreeRoot root = pdfDoc.getStructTreeRoot();
PdfStructureElement document = new PdfStructureElement(root, PdfName.Document);
pdfDoc.close();
```
Mit `setTagged()` wird das Dokument als strukturiert gekennzeichnet, und `PdfStructTreeRoot()` definiert die Grundstruktur.

---
### **2.4 Tab-Reihenfolge definieren**
Die Tab-Reihenfolge ist entscheidend für Benutzer, die mit der Tastatur navigieren. Ohne eine richtige Reihenfolge springen Nutzer unkontrolliert durch das Dokument.
```java
PdfDocument pdfDoc = new PdfDocument(new PdfWriter("tab_reihenfolge.pdf"));
pdfDoc.getCatalog().setPageMode(PdfName.UseOutlines);
pdfDoc.getCatalog().setViewerPreferences(new PdfViewerPreferences().setDirection(PdfViewerPreferences.PdfViewerPreferencesConstants.RIGHT_TO_LEFT));
pdfDoc.close();
```
Hier wird `UseOutlines` verwendet, um eine kontrollierte Navigation zu ermöglichen.

---
### **2.5 Lesereihenfolge mit PdfStructureElement definieren**
Die Lesereihenfolge ist entscheidend für Nutzer von Screenreadern. Die folgenden Codezeilen sorgen für eine korrekte Reihenfolge der Elemente:
```java
PdfDocument pdfDoc = new PdfDocument(new PdfWriter("lesereihenfolge.pdf"));
pdfDoc.setTagged();
PdfStructTreeRoot root = pdfDoc.getStructTreeRoot();
PdfStructureElement section = new PdfStructureElement(root, PdfName.Sect);
pdfDoc.close();
```
Durch die korrekte Verwendung von `PdfStructureElement` kann die Reihenfolge der Inhalte klar definiert werden.

---

### **2.6 Bilder / Alternativtexte**
```java
PdfImageXObject image = new PdfImageXObject(ImageDataFactory.create("bild.jpg"));
image.getAccessibleAttributes().put(PdfName.Alt, new PdfString("Dies ist ein Beispielbild mit einer detaillierten Beschreibung"));
```
---
### **2.7 Formularfelder barrierefrei machen**

```java
import com.itextpdf.kernel.pdf.*;
import com.itextpdf.forms.*;
import com.itextpdf.forms.fields.*;

public class AccessibleForm {
    public static void main(String[] args) throws Exception {
        // PDF erstellen
        PdfDocument pdfDoc = new PdfDocument(new PdfWriter("accessible_form.pdf"));
        PdfAcroForm form = PdfAcroForm.getAcroForm(pdfDoc, true);

        // Formularfeld hinzufügen
        PdfTextFormField nameField = PdfTextFormField.createText(pdfDoc, new com.itextpdf.kernel.geom.Rectangle(50, 750, 200, 20), "name", "");

        // Alternativtext für Barrierefreiheit setzen
        nameField.getAccessibilityProperties().setAlternateDescription("Eingabefeld für den Namen");

        // Formular dem Dokument hinzufügen
        form.addField(nameField);
        pdfDoc.close();
    }
}
```
---
### **2.8 Links korrekt kennzeichnen**

```java
import com.itextpdf.kernel.pdf.*;
import com.itextpdf.layout.Document;
import com.itextpdf.layout.element.Link;
import com.itextpdf.kernel.geom.Rectangle;
import com.itextpdf.kernel.pdf.action.PdfAction;
import com.itextpdf.kernel.pdf.annot.PdfLinkAnnotation;

public class AccessibleLink {
    public static void main(String[] args) throws Exception {
        // PDF-Dokument erstellen
        PdfDocument pdf = new PdfDocument(new PdfWriter("accessible_links.pdf"));
        Document document = new Document(pdf);

        // Link-Erstellung
        PdfLinkAnnotation linkAnnotation = new PdfLinkAnnotation(new Rectangle(0, 0));
        linkAnnotation.setAction(PdfAction.createURI("https://www.example.com"));
        Link link = new Link("Besuche unsere Website", linkAnnotation);

        // Barrierefreiheit: Alternativtext setzen
        link.getAccessibilityProperties().setAlternateDescription("Link zur Beispiel-Website");

        // Link hinzufügen
        document.add(link);
        document.close();
    }
}
```
---
## **3. Fazit**
Ein barrierefreies PDF benötigt eine gut strukturierte Word-Vorlage und eine gezielte Nachbearbeitung mit iText. Die Dokumentensprache, Tags, Lesereihenfolge, alternative Texte, Tabellenstruktur und Formularfelder sind essenzielle Bestandteile für die Barrierefreiheit. Eine abschließende Validierung sichert die Qualität des Dokuments.

Mit den hier gezeigten iText-Codebeispielen lässt sich dieser Prozess effizient umsetzen.

